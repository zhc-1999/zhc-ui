import type { StyleValue } from 'element-plus/es/utils/types';
declare const _default: import("vue").DefineComponent<{
    readonly size: import("../../../utils/props").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
    readonly disabled: BooleanConstructor;
    readonly modelValue: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | number | null | undefined>, "", unknown, unknown, unknown>;
    readonly type: import("../../../utils/props").BuildPropReturn<StringConstructor, "text", unknown, unknown, unknown>;
    readonly resize: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, "none" | "both" | "horizontal" | "vertical", unknown>;
    readonly autosize: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<boolean | {
        minRows?: number | undefined;
        maxRows?: number | undefined;
    }>, false, unknown, unknown, unknown>;
    readonly autocomplete: import("../../../utils/props").BuildPropReturn<StringConstructor, "off", unknown, unknown, unknown>;
    readonly placeholder: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly form: import("../../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly readonly: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly clearable: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly showPassword: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly showWordLimit: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly suffixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly prefixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly label: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly tabindex: import("../../../utils/props").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, unknown, unknown, unknown>;
    readonly validateEvent: import("../../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly inputStyle: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<StyleValue>, () => import("element-plus/es/utils/types").Mutable<{}>, unknown, unknown, unknown>;
}, {
    input: import("vue").Ref<HTMLInputElement | undefined>;
    textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
    attrs: import("vue").ComputedRef<Record<string, unknown>>;
    inputSize: import("vue").ComputedRef<import("element-plus/es/utils/types").ComponentSize>;
    validateState: import("vue").ComputedRef<string>;
    validateIcon: import("vue").ComputedRef<any>;
    containerStyle: import("vue").ComputedRef<StyleValue>;
    computedTextareaStyle: import("vue").ComputedRef<StyleValue>;
    inputDisabled: import("vue").ComputedRef<boolean>;
    showClear: import("vue").ComputedRef<boolean>;
    showPwdVisible: import("vue").ComputedRef<boolean>;
    isWordLimitVisible: import("vue").ComputedRef<boolean>;
    textLength: import("vue").ComputedRef<number>;
    hovering: import("vue").Ref<boolean>;
    inputExceed: import("vue").ComputedRef<boolean>;
    passwordVisible: import("vue").Ref<boolean>;
    inputOrTextarea: import("vue").ComputedRef<HTMLInputElement | HTMLTextAreaElement | undefined>;
    suffixVisible: import("vue").ComputedRef<boolean>;
    needStatusIcon: import("vue").ComputedRef<boolean>;
    resizeTextarea: () => void;
    handleInput: (event: Event) => void;
    handleChange: (event: Event) => void;
    handleFocus: (event: FocusEvent) => void;
    handleBlur: (event: FocusEvent) => void;
    handleCompositionStart: (event: CompositionEvent) => void;
    handleCompositionUpdate: (event: CompositionEvent) => void;
    handleCompositionEnd: (event: CompositionEvent) => void;
    handlePasswordVisible: () => void;
    clear: () => void;
    select: () => void;
    focus: () => void;
    blur: () => void;
    onMouseLeave: (evt: MouseEvent) => void;
    onMouseEnter: (evt: MouseEvent) => void;
    handleKeydown: (evt: KeyboardEvent) => void;
    nsInput: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: (name: string, state?: boolean) => string;
    };
    nsTextarea: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: (name: string, state?: boolean) => string;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string) => boolean;
    input: (value: string) => boolean;
    change: (value: string) => boolean;
    focus: (evt: FocusEvent) => boolean;
    blur: (evt: FocusEvent) => boolean;
    clear: () => boolean;
    mouseleave: (evt: MouseEvent) => boolean;
    mouseenter: (evt: MouseEvent) => boolean;
    keydown: (evt: KeyboardEvent) => boolean;
    compositionstart: (evt: CompositionEvent) => boolean;
    compositionupdate: (evt: CompositionEvent) => boolean;
    compositionend: (evt: CompositionEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly size: import("../../../utils/props").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
    readonly disabled: BooleanConstructor;
    readonly modelValue: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | number | null | undefined>, "", unknown, unknown, unknown>;
    readonly type: import("../../../utils/props").BuildPropReturn<StringConstructor, "text", unknown, unknown, unknown>;
    readonly resize: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, "none" | "both" | "horizontal" | "vertical", unknown>;
    readonly autosize: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<boolean | {
        minRows?: number | undefined;
        maxRows?: number | undefined;
    }>, false, unknown, unknown, unknown>;
    readonly autocomplete: import("../../../utils/props").BuildPropReturn<StringConstructor, "off", unknown, unknown, unknown>;
    readonly placeholder: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly form: import("../../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly readonly: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly clearable: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly showPassword: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly showWordLimit: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly suffixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly prefixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly label: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly tabindex: import("../../../utils/props").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, unknown, unknown, unknown>;
    readonly validateEvent: import("../../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly inputStyle: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<StyleValue>, () => import("element-plus/es/utils/types").Mutable<{}>, unknown, unknown, unknown>;
}>> & {
    onChange?: ((value: string) => any) | undefined;
    onMouseenter?: ((evt: MouseEvent) => any) | undefined;
    onMouseleave?: ((evt: MouseEvent) => any) | undefined;
    onKeydown?: ((evt: KeyboardEvent) => any) | undefined;
    onFocus?: ((evt: FocusEvent) => any) | undefined;
    onBlur?: ((evt: FocusEvent) => any) | undefined;
    onInput?: ((value: string) => any) | undefined;
    "onUpdate:modelValue"?: ((value: string) => any) | undefined;
    onCompositionend?: ((evt: CompositionEvent) => any) | undefined;
    onCompositionstart?: ((evt: CompositionEvent) => any) | undefined;
    onCompositionupdate?: ((evt: CompositionEvent) => any) | undefined;
    onClear?: (() => any) | undefined;
}, {
    type: string;
    size: import("../../../utils/props").BuildPropType<StringConstructor, "small" | "default" | "large", never>;
    disabled: boolean;
    modelValue: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | number | null | undefined>, unknown, unknown>;
    label: string;
    form: string;
    resize: import("../../../utils/props").BuildPropType<StringConstructor, "none" | "both" | "horizontal" | "vertical", unknown>;
    autosize: boolean | {
        minRows?: number | undefined;
        maxRows?: number | undefined;
    };
    autocomplete: string;
    placeholder: string;
    readonly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    clearable: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    showPassword: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    showWordLimit: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    suffixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    prefixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    tabindex: import("../../../utils/props").BuildPropType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
    validateEvent: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    inputStyle: StyleValue;
}>;
export default _default;
