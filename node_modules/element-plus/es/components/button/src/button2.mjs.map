{"version":3,"file":"button2.mjs","sources":["../../../../../../packages/components/button/src/button.vue"],"sourcesContent":["<template>\n  <button\n    ref=\"buttonRef\"\n    :class=\"[\n      ns.b(),\n      ns.m(buttonType),\n      ns.m(buttonSize),\n      ns.is('disabled', buttonDisabled),\n      ns.is('loading', loading),\n      ns.is('plain', plain),\n      ns.is('round', round),\n      ns.is('circle', circle),\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <template v-if=\"loading\">\n      <slot v-if=\"$slots.loading\" name=\"loading\"></slot>\n      <el-icon v-else :class=\"ns.is('loading')\">\n        <component :is=\"loadingIcon\" />\n      </el-icon>\n    </template>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ [ns.em('text', 'expand')]: shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text, ref } from 'vue'\nimport { useCssVar } from '@vueuse/core'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'ElButton',\n\n  components: {\n    ElIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const buttonRef = ref()\n    const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n    const globalConfig = useGlobalConfig('button')\n    const ns = useNamespace('button')\n    const autoInsertSpace = computed(\n      () =>\n        props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n    )\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n\n    const { form } = useFormItem()\n    const buttonSize = useSize(computed(() => buttonGroupContext?.size))\n    const buttonDisabled = useDisabled()\n    const buttonType = computed(\n      () => props.type || buttonGroupContext?.type || ''\n    )\n\n    // calculate hover & active color by color\n    const typeColor = computed(\n      () => useCssVar(`--el-color-${props.type}`).value\n    )\n    const buttonStyle = computed(() => {\n      let styles = {}\n\n      const buttonColor = props.color || typeColor.value\n\n      if (buttonColor) {\n        const shadeBgColor = new TinyColor(buttonColor).shade(10).toString()\n        if (props.plain) {\n          styles = {\n            '--el-button-bg-color': new TinyColor(buttonColor)\n              .tint(90)\n              .toString(),\n            '--el-button-text-color': buttonColor,\n            '--el-button-hover-text-color': 'var(--el-color-white)',\n            '--el-button-hover-bg-color': buttonColor,\n            '--el-button-hover-border-color': buttonColor,\n            '--el-button-active-bg-color': shadeBgColor,\n            '--el-button-active-text-color': 'var(--el-color-white)',\n            '--el-button-active-border-color': shadeBgColor,\n          }\n        } else {\n          const tintBgColor = new TinyColor(buttonColor).tint(20).toString()\n          styles = {\n            '--el-button-bg-color': buttonColor,\n            '--el-button-border-color': buttonColor,\n            '--el-button-hover-bg-color': tintBgColor,\n            '--el-button-hover-border-color': tintBgColor,\n            '--el-button-active-bg-color': shadeBgColor,\n            '--el-button-active-border-color': shadeBgColor,\n          }\n        }\n\n        if (buttonDisabled.value) {\n          const disabledButtonColor = new TinyColor(buttonColor)\n            .tint(50)\n            .toString()\n          styles['--el-button-disabled-bg-color'] = disabledButtonColor\n          styles['--el-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n\n      return styles\n    })\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        form?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonRef,\n      buttonStyle,\n\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n\n      ns,\n    }\n  },\n})\n</script>\n"],"names":["_normalizeStyle"],"mappings":";;;;;;;;;;;;;;;AAsDA,MAAK,YAAa,gBAAa;AAAA,EAC7B,MAAM;AAAA,EAEN,YAAY;AAAA,IACV;AAAA,IACA;AAAA;AAAA,EAGF,OAAO;AAAA,EACP,OAAO;AAAA,EAEP,MAAM,OAAO,EAAE,MAAM,SAAS;AAC5B,UAAM,YAAY;AAClB,UAAM,qBAAqB,OAAO,uBAAuB;AACzD,UAAM,eAAe,gBAAgB;AACrC,UAAM,KAAK,aAAa;AACxB,UAAM,kBAAkB,SACtB,MACE;AAIJ,UAAM;AACJ;AACA;AACE;AACA,YAAI;AACF,uBAAa;AACb,+CAAqC;AAAK;AAAA;AAG9C;AAAO;AAGT;AACA;AACA;AACA;AAKA,UAAM;AAGN,UAAM,6BAA6B;AACjC,UAAI;AAEJ,gCAA0B;AAE1B,UAAI;AACF,iCAAyB;AACzB;AACE;AAAS;AAGJ;AACuB,YAC1B;AAAgC;AACF,YAC9B;AAAkC,YAClC;AAA+B,YAC/B;AAAiC,YACjC;AAAmC;AAAA;AAGrC;AACA;AAAS,YACP;AAAwB;AACI;AACE;AACI,YAClC;AAA+B,YAC/B;AAAmC;AAAA;AAIvC,YAAI;AACF;AAGA;AACA;AAA8C;AAAA;AAIlD;AAAO;AAGT;AACE;AACE;AAAM;AAER;AAAc;AAGhB;AAAO;AACL,MACA;AAAA,MAEA;AAAA;AACA,MACA;AAAA,MAEA;AAAA,MAEA;AAAA,MAEA;AAAA;AAAA;AAAA;;;;;AAhKa;AACT,2BAAc;AAAA;AAAa;AAA0B;AAAwB;AAAqD,MAAgB,QAAG,GAAE;AAAU,MAAc,QAAG;AAAY,MAAc,QAAG,iBAAa;AAAA;;cAWxN,uBAAW;AAAA;AACd,UACD;AAAA;AACA;;AAEU;AACY,WAA1BA;aACsB;AAAA;;;AACpB;;;;;AAIsB;AAAxB;;;6BAGoB;AAAA;;AACd;;AAEN;;;;;;;;;;;;"}