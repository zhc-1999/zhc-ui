var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => src_default
});
var import_compiler_sfc = __toModule(require("@vue/compiler-sfc"));
var import_magic_string = __toModule(require("magic-string"));
var src_default = (options = {}) => {
  return {
    name: "vite:setup-name-support",
    enforce: "pre",
    async transform(code, id) {
      if (!/\.vue$/.test(id)) {
        return null;
      }
      const { name = true } = options;
      if (name) {
        return supportScriptName(code, id);
      }
    }
  };
};
function supportScriptName(code, id) {
  let s;
  const str = () => s || (s = new import_magic_string.default(code));
  const { descriptor } = (0, import_compiler_sfc.parse)(code);
  if (!descriptor.script && descriptor.scriptSetup) {
    const result = (0, import_compiler_sfc.compileScript)(descriptor, { id });
    const name = result.attrs.name;
    const lang = result.attrs.lang;
    if (name) {
      str().appendLeft(0, `
<script ${lang ? `lang="${lang}"` : ""}>
  import { defineComponent } from 'vue'
  export default defineComponent({
  name: '${name}',
})
<\/script>
`);
    }
    return {
      map: str().generateMap({ hires: true }),
      code: str().toString()
    };
  } else {
    return null;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
